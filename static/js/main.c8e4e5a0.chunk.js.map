{"version":3,"sources":["logo.svg","User.js","UserList.js","AddUser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","User","props","userData","userName","showGamesPlayed","numGamesPlayed","UserList","state","toggleShow","setState","curState","this","buttonNumGame","onClick","console","log","className","length","map","data","Component","AddUser","user","firstName","lastName","userExists","handleChange","event","target","name","value","currState","inputIsEmpty","noGame","contactExists","currUsername","users","addUser","preventDefault","onAddUser","onSubmit","type","placeholder","onChange","disabled","App","handleAddUser","prevState","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c8e4e5a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst User = props => {\r\n\r\n  \r\n   \r\n      return(\r\n        \r\n        <li>\r\n        <span>Username: {props.userData.userName} </span>\r\n\t\t<span> have played {props.showGamesPlayed ? props.userData.numGamesPlayed : ' * '} Games.</span>\r\n\t\t</li>\r\n        \r\n        \r\n        )\r\n   \r\n  \r\n\r\n}\r\n\r\nUser.propTypes = {\r\n\tuserData: PropTypes.object.isRequired,\r\n    showGamesPlayed: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default User;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport User from './User'\r\n\r\nclass UserList extends Component {\r\n\r\n\tstate = {\r\n\t\tshowGamesPlayed: false,\r\n\t}\r\n\r\n\r\n\ttoggleShow = () => {\r\n\t\tthis.setState(curState => ({ showGamesPlayed: !curState.showGamesPlayed, }));\r\n\t};\r\n\r\n\trender() {\r\n\r\n\t\t//const { showGamesPlayed } = this.state;\r\n\t\tconst { userData } = this.props;\r\n\r\n\t\tconst buttonNumGame = (\r\n\t\t\t<div>\r\n\t\t\t\t<button onClick={this.toggleShow}>\r\n\t\t\t\t\t{this.state.showGamesPlayed ? \"Hide\" : \"Show\"} Number of Games Played\r\n\t\t</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t\tconsole.log(this.state.showGamesPlayed);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"UserList\">\r\n\r\n\t\t\t\t<p className=\"GameboardList\">Gameboard List</p>\r\n\r\n\t\t\t\t{userData && userData.length > 0 ? buttonNumGame : \"\"}\r\n\r\n\r\n\t\t\t\t<ol>\r\n\r\n\t\t\t\t\t{userData.map(data => <User userData={data} showGamesPlayed={this.state.showGamesPlayed} />)}\r\n\r\n\t\t\t\t</ol>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\r\n}\r\n\r\nUserList.propTypes = {\r\n\tuserData: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default UserList;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass AddUser extends Component {\r\n  state={\r\n    user:\r\n      {\r\n  \t\tfirstName: '',\r\n    \tlastName: '',\r\n    \tuserName: '',\r\n      },\r\n    userExists: false,\r\n    \r\n  \t};\r\n\r\n   handleChange = event => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState(currState => ({\r\n      ...currState,\r\n      user: {\r\n        ...currState.user,\r\n        [name]: value,\r\n      },\r\n    }));\r\n  };\r\n\r\n\tinputIsEmpty = () =>{\r\n\t\treturn this.state.firstName==='' ||this.state.lastName===''|| this.state.noGame===''\r\n\t}\r\n\r\n\tcontactExists = currUsername => {\r\n    const users = this.props.userData;\r\n    for (let user of users) {\r\n      console.log(\"user: \"+user);\r\n      console.log(\"currUsername: \"+currUsername);\r\n      if (user.userName === currUsername) {\r\n        \r\n        return true;\r\n      }\r\n    }\r\n      return false;\r\n  \t};\r\n\r\n\taddUser =event =>{\r\n    \tevent.preventDefault();\r\n      \t\r\n      const userExists = this.contactExists(this.state.user.userName);\r\n      console.log(\"this.state.userName: \"+this.state.user.userName);\r\n      \r\n      if(!userExists){\r\n      \tthis.props.onAddUser(this.state.user);\r\n    \t};\r\n      \r\n      this.setState(() => ({userExists,}));\r\n      \r\n      \r\n\t}\r\n  \r\n    render() {\r\n      \r\n      //const { firstName, lastName, username } = this.state.user;\r\n\t\tconsole.log(\"userExists: \"+this.state.userExists);\r\n\r\n      return(\r\n      <form onSubmit={this.addUser}>\r\n\t\t<input\r\n\t\t\ttype=\"text\"\r\n\t\t\tplaceholder=\"First Name\"\r\n       \t\tname=\"firstName\"\r\n\t\t\tvalue={this.state.firstName}\r\n\t\t\tonChange={this.handleChange}\r\n\t\t/>\r\n\t\t<input\r\n\t\t\ttype=\"text\"\r\n\t\t\tplaceholder=\"Last Name\"\r\n\t\t\tname=\"lastName\"\r\n\t\t\tvalue={this.state.lastName}\r\n\t\t\tonChange={this.handleChange}\r\n\t\t/>\r\n\t\t<input\r\n\t\t\ttype=\"text\"\r\n\t\t\tplaceholder=\"User Name\"\r\n\t\t\tname=\"userName\"\r\n\t\t\tvalue={this.state.userName}\r\n\t\t\tonChange={this.handleChange}\r\n\t\t/>\r\n\t\t<button disabled={this.inputIsEmpty()}>Add</button>\r\n\r\n\t\t{this.state.userExists ? (<p className=\"error\">You cannot add a user that already exists.</p>) : ('')}\r\n\r\n\t\t<hr></hr>\r\n\t\t</form>\r\n\r\n\r\n\r\n\t\t\r\n\t  \r\n        )\r\n    }\r\n  \r\n}\r\n\r\nAddUser.propTypes = {\r\n\tonAddUser: PropTypes.func.isRequired,\r\n \tuserData: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default AddUser;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport UserList from './UserList';\nimport AddUser from './AddUser';\n\n\nclass App extends Component {\n  \n  state={\n\n    users: [\n    \n    \t],\n  \t}\n\n\thandleAddUser = user => {\n      user.numGamesPlayed = 0;\n\t\tthis.setState(prevState=> ({users: [...prevState.users, user]}))\n\t};\n\n  render() {\n   \n    console.log(this.state.users);\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">ReactND - Coding Practice</h1>\n        </header>\n    \n    \t<AddUser onAddUser={this.handleAddUser} userData={this.state.users}/>\n    \t\n\n\t\t  <UserList userData={this.state.users}/>\n\t\t\n\t\t\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}